public int add(int a, int b) {
    return a + b;
}

1、JDK8之前，我们都是面向数据编程，方法传值  pass by value


2、JDK8是面向函数式，面向行为的，我们可以传值，传行为


Google Guava


Date Api


Joda Time


Lambda表达式的基本结构:

(param1, param2, param3) -> {

}

关于函数式接口：
Note that instances of functional interfaces can be created with lambda expressions, method references, or constructor references.

lambda: 见上文

method reference: 例如 System.out::println



1.  a functional interface has exactly one abstract method.

2.  If a type is annotated with this annotation type(@interface FunctionalInterface), compilers are required to generate an error message unless:
        The type is an interface type and not an annotation type, enum, or class.
        The annotated type satisfies the requirements of a functional interface.

3.  However, the compiler will treat any interface meeting the definition of a functional interface as a functional interface regardless of whether or not a {@code FunctionalInterface} annotation is present on the interface declaration.
    也就是说, 如果某个接口只有一个抽象方法但是并没有用注解去修饰那么编译器依旧会将该接口看作是函数式接口

4.  If an interface declares an abstract method overriding one of the public methods of {@code java.lang.Object}, that also does <em>not</em> count toward the interface's abstract method count since any implementation of the interface will have an implementation from {@code java.lang.Object} or elsewhere.


高阶函数: 如果一个函数接收一个函数作为参数, 或者返回一个函数作为返回值, 那么该函数就叫做高阶函数



Optional

NullPointerException

if(null != person) {
    ...
    if(null != address) {
        ...
    }
}

String str = null;
// 可恶的计算机科学家


optional: A container object which may or may not contain a non-null value.

Optional 不要用作方法参数和成员变量, 最好只用作返回值




方法引用: Method Reference

实际上就是进一步简化Lambda, 是Lambda的语法糖; 是一个"函数指针" (实际上是一个函数式接口的实例)

方法引用分为4类:

1. class_name::static_mathod_name

2. reference_name(object reference)::instance_method_name

3. class_name::instance_method_name

4. class_name::new



JDK8中引入 interface default method 在设计上是nice的, 是为了老版本的应用向后兼容


Stream:

组成:  1, 源;  2, 零个额多个中间操作(A); 3, 终止操作(B);

分类:  A, 惰性求值;  B, 及早求值;





集合关注的是对数据与数据存储本身

流关注的是对数据的计算

流和迭代器类似的一点: 无法重复使用或消费

中间操作都会返回一个Stream对象


流是短路运算





collect: 收集器
collector: 收集者的抽象. A mutable reduction operation that accumulates input elements into a mutable result container

函数式编程最大的特点: 只需表示做什么, 而不是如何做


时间:
1.格林威治标准时间
2.UTC时间  --  2010-12-1T11:22:33.57Z    2010-12-1T11:22:33.57+08:00
3.ISO8601  --  Joda















