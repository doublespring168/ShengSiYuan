
gradlew -> gradle wrapper    gradle包装器, 使用此脚本在不安装gradle的情况下, 也可以构建工程


# 下载目录
distributionBase=GRADLE_USER_HOME
# 下载目录的相对路径
distributionPath=wrapper/dists
# 解压目录
zipStoreBase=GRADLE_USER_HOME
# 解压目录的相对路径
zipStorePath=wrapper/dists
# 需要的gradle版本
# xxx.bin   xxx.all(bin sources doc)
distributionUrl=https\://services.gradle.org/distributions/gradle-4.4-bin.zip
# 校验和
distributionSha256Sum=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# shasum -a 256 file    ->    7a2c66d1a78f811d5f37d14630ad21cec5e77a2a4dc61e787e2257a6341016ce

# gradle wrapper
# gradle wrapper --gradle-version 4.4

# gradle clean build
# ./gradlew clean build






早期:
RMI: remote method invacation, 只针对java

client: stub

server: skeleton

序列化与反序列化  也叫做 编码与解码

Android AIDL

---------

RPC: Remote Procedure Call, 远程过程调用, RPC框架很多都是跨语言的

1. 定义一个接口说明文件(IDL), 描述了对象(结构体)、对象成员、接口方法等一系列信息

2. 通过RPC框架所提供的编译器将接口说明文件编译成具体语言文件

3. 在客户端与服务器端分别引入RPC编译器所生成的文件即可像调用本地方法一样调用远程方法


---------------

git submodule: git 仓库中的子仓库

git subtree




java.io
    最核心的概念是 Stream, 面向流的编程, Java 中, 一个流要么是输入流, 要么是输出流, 职责单一

java.nio
    3个核心概念: Selector、 Channel、 Buffer
    java.nio中, 我们是面向块 (block) 或者换红区 (buffer) 编程的


    Selector 可以关联多个 Channel, 通过事件切换到不同的 Channel
    Channel 可以理解为 io 中的 Stream, 但是 Channel 可以通过 Buffer 完成读和写
    Channel 关联一个 Buffer


    Buffer 本身是一块内存, 底层是个数组, 数据的 读写 都由 Buffer 实现
    除了数组之外，Buffer还提供了对数据结构化访问方式，并且可以追踪到系统的读写过程
    注意: 相对方法的操作会修改 limit 和 position;  绝对方法完全忽略掉 limit 和 position





